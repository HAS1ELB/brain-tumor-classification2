import os
import sys
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import cv2

# D√©finir les chemins dynamiquement
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_PATH = os.path.join(BASE_DIR, "..", "models", "final_model.keras")

# Charger le mod√®le
print(f"üìÇ Chargement du mod√®le depuis : {os.path.abspath(MODEL_PATH)}")
try:
    model = load_model(MODEL_PATH)
    print("‚úÖ Mod√®le charg√© avec succ√®s.")
except FileNotFoundError:
    raise FileNotFoundError(f"‚ùå Mod√®le non trouv√© : {os.path.abspath(MODEL_PATH)}")
except Exception as e:
    raise Exception(f"‚ùå Erreur lors du chargement du mod√®le : {e}")

# Classes du mod√®le
class_names = ['glioma', 'meningioma', 'notumor', 'pituitary']

# Fonction de pr√©traitement de l'image
def preprocess_image(image_path):
    """
    Pr√©traite l'image pour la pr√©diction.
    Args:
        image_path (str): Chemin vers le fichier image.
    Returns:
        np.ndarray: Image pr√©trait√©e.
    """
    print(f"üñºÔ∏è Chargement et pr√©traitement de l'image : {os.path.abspath(image_path)}")
    img = cv2.imread(image_path)
    if img is None:
        raise ValueError(f"‚ùå Erreur : Impossible de charger l'image. Chemin : {os.path.abspath(image_path)}")
    img = cv2.resize(img, (128, 128))  # Redimensionner en 128x128
    img = img / 255.0  # Normaliser les pixels [0, 1]
    img = np.expand_dims(img, axis=0)  # Ajouter une dimension batch
    return img

# Fonction de pr√©diction
def predict_image(image_path):
    """
    Pr√©dit la classe d'une image donn√©e.
    Args:
        image_path (str): Chemin vers le fichier image.
    """
    try:
        img = preprocess_image(image_path)
        predictions = model.predict(img)
        predicted_class = np.argmax(predictions, axis=1)[0]
        confidence = np.max(predictions)
        print(f"‚úÖ Classe Pr√©dite : {class_names[predicted_class]}")
        print(f"üìä Confiance : {confidence:.2f}")
    except ValueError as ve:
        print(f"‚ùå Erreur de pr√©traitement : {ve}")
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale : {e}")

# Fonction principale
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùó Usage : python predict_image.py <chemin_vers_image>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    
    # V√©rifier si le chemin existe
    if not os.path.exists(image_path):
        print(f"‚ùå Erreur : Le chemin de l'image n'existe pas. Chemin fourni : {os.path.abspath(image_path)}")
        sys.exit(1)
    
    predict_image(image_path)
